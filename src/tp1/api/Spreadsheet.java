package tp1.api;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Set;

import org.glassfish.jersey.client.ClientConfig;

import com.sun.xml.ws.client.BindingProviderProperties;

import tp1.api.engine.AbstractSpreadsheet;
import tp1.api.service.soap.SoapSpreadsheets;
import tp1.impl.engine.SpreadsheetEngineImpl;
import jakarta.ws.rs.ProcessingException;
import jakarta.ws.rs.client.Client;
import jakarta.ws.rs.client.ClientBuilder;
import jakarta.ws.rs.client.WebTarget;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.xml.ws.BindingProvider;
import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebServiceException;

import java.util.logging.Logger;

import javax.xml.namespace.QName;

import tp1.util.CellRange;

/**
 * Represents a spreadsheet.
 */
public class Spreadsheet implements AbstractSpreadsheet {
	public static final String SHEETS_WSDL = String.format("/%s/?wsdl", SoapSpreadsheets.NAME);
	public static final QName SHEETS_QNAME = new QName(SoapSpreadsheets.NAMESPACE, SoapSpreadsheets.NAME);
	public static final int TIMEOUT = 1000;
	// id of the sheet - generated by the system
	private String sheetId;
	// id of the owner
	private String owner;
	// URL of the sheet (REST endpoint) - generated by the system
	private String sheetURL;
	// number of the lines and columns
	private int rows, columns;
	// set of users with which ths sheet is shared
	private static Logger Log = Logger.getLogger(Spreadsheet.class.getName());
	private Set<String> sharedWith;

	// raw contents of the sheet
	private String[][] rawValues;

	public Spreadsheet() {
	}

	public Spreadsheet(String sheetId, String owner, String sheetURL, int lines, int columns, Set<String> sharedWith,
			String[][] rawValues) {
		super();
		this.sheetId = sheetId;
		this.owner = owner;
		this.sheetURL = sheetURL;
		this.rows = lines;
		this.columns = columns;
		this.sharedWith = sharedWith;
		this.rawValues = rawValues;
	}

	public String getSheetId() {
		return sheetId;
	}

	public void setSheetId(String sheetId) {
		this.sheetId = sheetId;
	}

	public String getOwner() {
		return owner;
	}

	public void setOwner(String owner) {
		this.owner = owner;
	}

	public String getSheetURL() {
		return sheetURL;
	}

	public void setSheetURL(String sheetURL) {
		this.sheetURL = sheetURL;
	}

	public int getRows() {
		return rows;
	}

	public void setRows(int rows) {
		this.rows = rows;
	}

	public int getColumns() {
		return columns;
	}

	public void setColumns(int columns) {
		this.columns = columns;
	}

	public Set<String> getSharedWith() {
		return sharedWith;
	}

	public void setSharedWith(Set<String> sharedWith) {
		this.sharedWith = sharedWith;
	}

	public String[][] getRawValues() {
		return rawValues;
	}

	public void setRawValues(String[][] rawValues) {
		this.rawValues = rawValues;
	}

	public boolean isSharedWith(String userId) {
		return this.sharedWith.contains(userId);
	}

	/**
	 * Updates the raw value of cell, given the cell name (e.g. A1).
	 * 
	 * @param cell  - the cell being updated.
	 * @param value the new raw value.
	 */
	public void setCellRawValue(String cell, String value) {
		var r = new CellRange(cell + ":A1");
		rawValues[r.topRow][r.topCol] = value;
	}

	/**
	 * Updates the raw value of cell, given the row and col indices.
	 * 
	 * @param row   - the row index of the cell being updated.
	 * @param col   - the column index of the cell being updated.
	 * @param value the new raw value.
	 */
	@Deprecated
	public void setCellRawValue(int row, int col, String value) {
		rawValues[row][col] = value;
	}

	/**
	 * Gets the raw value of a cell, given its index coordinates.
	 * 
	 * @param row - the row index.
	 * @param col - the column index.
	 * @return the raw value of the cell.
	 */
	public String getCellRawValue(int row, int col) {
		return rawValues[row][col];
	}

	@Override
	public String[][] getRangeValues(String sheetURL, String range) {
		System.out.println(sheetURL + "CONA");

		if (sheetURL.contains("soap")) {
			SoapSpreadsheets sheetsService = null;
			String[] aux1 = sheetURL.split("/spreadsheets/");
			String url = aux1[0] + "/spreadsheets";
			String sheetID = aux1[1];

			try {
				Service service = Service.create(new URL(url + SHEETS_WSDL), SHEETS_QNAME);
				sheetsService = service.getPort(SoapSpreadsheets.class);
			} catch (MalformedURLException e) {
				Log.info("getRangeValues: Bad Url");

			} catch (WebServiceException e) {
				Log.info("getRangeValues: Failed to getRangeValues to " + sheetURL + ". Retrying...");

			}

			((BindingProvider) sheetsService).getRequestContext().put(BindingProviderProperties.CONNECT_TIMEOUT,
					TIMEOUT);
			((BindingProvider) sheetsService).getRequestContext().put(BindingProviderProperties.REQUEST_TIMEOUT,
					TIMEOUT);

			try {

				Spreadsheet s = sheetsService.getSpreadsheetComputed(sheetID);

				SpreadsheetEngineImpl aux = (SpreadsheetEngineImpl) SpreadsheetEngineImpl.getInstance();

				String[][] result = aux.computeSpreadsheetValues(s);
				CellRange values = new CellRange(range);

				return values.extractRangeValuesFrom(result);
			} catch (WebServiceException wse) {
				Log.info("get: Communication error...");
			}

		} else {
			Log.info("URL " + sheetURL);
			Response r = null;
			ClientConfig config = new ClientConfig();
			Client client = ClientBuilder.newClient(config);

			WebTarget target = client.target(sheetURL);
			target = target.queryParam("user", this.getOwner());

			try {
				r = target.path("/users/range").request().accept(MediaType.APPLICATION_JSON).get();
			} catch (ProcessingException e) {
				Log.info("Could not communicate with the UserResource.");
			}

			String[][] aux = r.readEntity(String[][].class);

			CellRange values = new CellRange(range);

			return values.extractRangeValuesFrom(aux);
		}
		return null;
	}

}
